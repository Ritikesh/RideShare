<% content_for :title, "Book Ride" %>
<% content_for :heading, "Book a Ride" %>
<% content_for :styles do %>
	<link href='http://fonts.googleapis.com/css?family=Slabo+27px' rel='stylesheet' type='text/css'>
<% end %>

<div class="row">
	<div id="box-alert" class="alert-box columns large-8 large-centered info" data-alert>
		<span id="alert-text" class="subheader">
			Add addresses and update markers to view them on the map. You can move them around too!<br><strong>Note:</strong> Always update markers to avoid 'incorrect' data submission.
		</span>
	</div>
</div>
<div class="row">
	<div class="large-6 columns">
	<%= form_for @ride_transaction do |f| %>
		<%= render 'layouts/error_messages', object: @ride_transaction %>

		<%= content_tag :div, class: "row" do %>
			<%= content_tag :div, class: "large-10 columns" do %>
				<%= f.label :from_address %>
				<%= f.text_field :from_address, required: true %>
			<% end %>
		<% end %>

		<%= content_tag :div, class: "row" do %>
			<%= content_tag :div, class: "large-10 columns" do %>
				<%= f.label :to_address %>
				<%= f.text_field :to_address, required: true %>
			<% end %>
		<% end %>

		<%= content_tag :div, class: "row" do %>
			<%= content_tag :div, class: "large-10 columns" do %>
				<%= f.label :timeofride %>
				<%= f.text_field :timeofride, class: "datetimepicker", required: true, readonly: true %>
			<% end %>
		<% end %>

		<div class="row margin-bottom">
			<div class="columns large-5" id="ride_transaction_Cost">
				Cost: <span>0</span>
			</div>
			<div class="columns large-5" id="ride_transaction_Distance">
				Distance: <span>0</span>
			</div>
			<div class="large-2"></div>
		</div>

		<%= f.hidden_field :distance %>
		<%= f.hidden_field :cost %>
		<%= f.hidden_field :from_latitude %>
		<%= f.hidden_field :from_longitude %>
		<%= f.hidden_field :to_latitude %>
		<%= f.hidden_field :to_longitude %>
		<%= f.hidden_field :ride_id %>

		<%= content_tag :div, class: "row" do %>
			<%= content_tag :div, class: "large-10 columns" do %>
				<button type="button" disabled class="button radius tiny margin-right" id="updateMarkers">Update Markers </button>
				<button type="button" disabled id="getRoute" class="button radius tiny margin-right">Get Route</button>
				<%= f.button "Search", type: "button", id:"Search", class: "button tiny radius", disabled: true %>
			<% end %>
		<% end %>

		<div class="hide" id="norow-container">
			<div class="callout panel radius">
				<p class="text-center"><i class="fi-burst large"></i> Snap! <i class="fi-burst large"></i></p>
				There are no rides based on your locations, YET! <br>Please come back later to book one..
			</div>
		</div>
		<div id="ride-list-container">
		
		</div>
	<% end %>
	</div>
	<div class="large-6 columns margin-top">
		<div id="map"></div>
	</div>
</div>
<script type="text/javascript">
	var bounds = [];

	// initialize map
	var map = new GMaps({
		div: '#map',
        lat: 13.0826802,
        lng: 80.27071840000008
	});

	// geolocation
	setTimeout(function(){
		GMaps.geolocate({
			success: function(position) {
				map.setCenter(position.coords.latitude, position.coords.longitude);
			},
			error: function(error) {
			},
			not_supported: function() {
			},
			always: function() {
			}
		});
	}, 500);

	// on erroneous submission, enable update markers automatically
	if($("#ride_transaction_from_address").val() && $("#ride_transaction_to_address").val())
	{
		$("#Search").attr("disabled",true);
		$("#updateMarkers").removeAttr("disabled");
		$("#getRoute").removeAttr("disabled");
	}

	// update address on marker 'drag-end'
	function updateAddress(marker, element)
	{
		GMaps.geocode({
			latLng: marker.getPosition(),
			callback: function(results, status) {

				var text = (element == "#ride_transaction_from_address") ? "From: " : "To: ";
				
				if (status == 'OK') {
					// infowindow content is not directly editable - create new for every drag based location update
					marker.infoWindow.close();
					marker.infoWindow = new google.maps.InfoWindow({
					  	content: text + results[0].formatted_address
					});
					marker.infoWindow.open(marker.get('map'), marker);

					var latlng = results[0].geometry.location;
					$(element).val(results[0].formatted_address);
					if(element == "#ride_transaction_to_address")
					{
						$("#ride_transaction_to_latitude").val(latlng.lat());
			      		$("#ride_transaction_to_longitude").val(latlng.lng());
					}
					else
					{
						$("#ride_transaction_from_latitude").val(latlng.lat());
			      		$("#ride_transaction_from_longitude").val(latlng.lng());
					}
				}
			}
		});
	}

	// to fit markers after they're loaded

	function fitToBounds(bounds){
		map.fitLatLngBounds(bounds);
	}

	// To update rides on page after all polylines have been initialized from Gmaps
	function updateRidesOnPage(polyLines)
	{
		var a = new google.maps.LatLng($("#ride_transaction_from_latitude").val(), $("#ride_transaction_from_longitude").val());
  		var b = new google.maps.LatLng($("#ride_transaction_to_latitude").val(), $("#ride_transaction_to_longitude").val());
		
		var flag = true;

		$.each(polyLines, function(index, value){
			 var poly = value.polyline;
			if( google.maps.geometry.poly.isLocationOnEdge(a, poly, 0.020) &&
				google.maps.geometry.poly.isLocationOnEdge(b, poly, 0.020) )
			{
				flag = false;
	  			$.get("/ride_transactions/getRideData/"+value.rideIndex ,function(data){
	  				$("#ride-list-container").append(data);
	  			});
	  		}
  		});
  		if(flag){
	  		if($("#ride-list-container").html() == "")
	  			$("#norow-container").show();
  		}
		$(".otherload-con").fadeOut(1000);
	}

	// before submit, update markers - waste of API calls

	// $("#new_ride_transaction").on('submit',function(){
		
	// });

	$("#ride_transaction_from_address, #ride_transaction_to_address").change(function(){
		$("#Search").attr("disabled",true);
		$("#updateMarkers").removeAttr("disabled");
		$("#getRoute").removeAttr("disabled");	
	});

	/* 
	 * Event Binders
	 */

	// update the markers
	$("#updateMarkers").click(function(){
		if($('#ride_transaction_from_address').val() && $('#ride_transaction_to_address').val())
		{
			bounds.length = 0; //clear the array
			map.removeMarkers(); //clear the map
			
			GMaps.geocode({
			  address: $('#ride_transaction_from_address').val(),
			  callback: function(results, status) {
			    
			    if (status == 'OK') {
			      var latlng = results[0].geometry.location;
			      bounds.push(new google.maps.LatLng(latlng.lat(), latlng.lng()));
			      
			      $("#ride_transaction_from_latitude").val(latlng.lat());
			      $("#ride_transaction_from_longitude").val(latlng.lng());
			      
			      map.addMarker({
			        lat: latlng.lat(),
			        lng: latlng.lng(),
					infoWindow: {
						content: "From:" + $("#ride_transaction_from_address").val()
					},
		  			draggable: true,
					dragend: function(e) {
						updateAddress(this, "#ride_transaction_from_address");
					}
			      });
			    }

			    if (map.markers.length == 2)
		        	fitToBounds(bounds); // fit markers after both markers are in place
			  }
			});

			GMaps.geocode({
			  address: $('#ride_transaction_to_address').val(),
			  callback: function(results, status) {
			    
			    if (status == 'OK') {
			      var latlng = results[0].geometry.location;
			      bounds.push(new google.maps.LatLng(latlng.lat(), latlng.lng()));
			      
			      $("#ride_transaction_to_latitude").val(latlng.lat());
			      $("#ride_transaction_to_longitude").val(latlng.lng());
			      
			      map.addMarker({
			        lat: latlng.lat(),
			        lng: latlng.lng(),
					infoWindow: {
						content: "To:" + $("#ride_transaction_to_address").val()
					},
		  			draggable: true,
					dragend: function(e) {
						updateAddress(this, "#ride_transaction_to_address");
					}
			      });
			    }

			    if (map.markers.length == 2)
		        	fitToBounds(bounds); // fit markers after both markers are in place
			  }
			});
		}
		else
		{
			$("#alert-text").html("From and To address are required for markers to be updated on the Map.");
			$("#box-alert").css("visibility","initial");
		}
	});

	$("#getRoute").click(function(){
		var path = [];
		var distance = 0.0;
		if(map.polylines.length)
        	map.removePolylines();
		
		map.getRoutes({
            origin: [$("#ride_transaction_from_latitude").val(), $("#ride_transaction_from_longitude").val()],
			destination: [$("#ride_transaction_to_latitude").val(), $("#ride_transaction_to_longitude").val()],
			callback: function (e) {
                for (i=0; i<e[0].legs.length; i++) {
                    distance += e[0].legs[i].distance.value;
                    for(j=0; j<e[0].legs[i].steps.length; j++) {
                    	for(k=0; k<e[0].legs[i].steps[j].path.length; k++) {
                    		path.push(e[0].legs[i].steps[j].path[k]);
                    	}
                    }
                }
            	map.drawPolyline({
					path: path,
					strokeColor: '#131540',
					strokeOpacity: 0.6,
					strokeWeight: 6
				});
				distance = distance/1000;
				$("#ride_transaction_distance").val(distance);
				$("#ride_transaction_cost").val(distance * 5);
				$("#ride_transaction_Distance > span").html(distance.toFixed(2) + " km.");
				$("#ride_transaction_Cost > span").html("Rs. " + (distance * 5).toFixed(2) + "/-");
				$("#Search").removeAttr("disabled");
            }
        });
	});

	$("#Search").click(function(event){

		event.preventDefault();	//prevent form submission
		
		var timeofride = $("#ride_transaction_timeofride").val();
		var dateformatted = ([timeofride.split("-")[1], timeofride.split("-")[0], timeofride.split("-")[2]]).join("-");	//Date.parse accepts mm-dd-yyyy h:m
		if(Date.parse(dateformatted))
		{
			$(".otherload-con").show();
			$("#ride-list-container").html("");
			$("#norow-container").hide();
			$("#box-alert").css("visibility","hidden");
	    
		    $.get("/ride_transactions/search?timeofride="+encodeURIComponent(timeofride)).success(function(data){
		        console.log("success - "+ data.rides.length);
				
				if(!data.rides.length)
				{
					$("#norow-container").show();
					$(".otherload-con").fadeOut(1500);
					return false;
				}

				var polyLines = [];
		        $.each(data.rides, function(index, value){
					map.getRoutes({
			            origin: [ value.from_latitude, value.from_longitude ],
						destination: [ value.to_latitude, value.to_longitude ],
						callback: function (e) {
							var path = [];
			                for (i=0; i<e[0].legs.length; i++) {
			                    for(j=0; j<e[0].legs[i].steps.length; j++) {
			                    	for(k=0; k<e[0].legs[i].steps[j].path.length; k++) {
			                    		path.push(e[0].legs[i].steps[j].path[k]);
			                    	}
			                    }
			                }
			                polyLines.push({ rideIndex: value.id , polyline:
			                	new google.maps.Polyline({
							    	path: path
						    	})
			            	}); 
			            	if(data.rides.length == polyLines.length)
			            	{
			            		//on last callback, call to check if there's a ride available
			            		updateRidesOnPage(polyLines);
			            	}	
			            }
			        });
				});
		    });
		}
		else
		{
			$("#alert-text").html("Invalid Date");
			$("#box-alert").css("visibility","inherit");
		}
	});
	
	$("#ride-list-container").on('click', "a.bookRide", function(event){
		event.preventDefault();
		$("#ride_transaction_ride_id").val($(this).data("rideid"));
		$("#new_ride_transaction").submit();
	});

</script>